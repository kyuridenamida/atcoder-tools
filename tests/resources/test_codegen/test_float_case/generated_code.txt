package main

import (
	"bufio"
	"os"
	"strconv"
)

func solve(L int64, N int64, M int64, K []float64, A []int64, S []float64) {

}

func main() {
	scanner := bufio.NewScanner(os.Stdin)
	const initialBufSize = 4096
	const maxBufSize = 1000000
	scanner.Buffer(make([]byte, initialBufSize), maxBufSize)
	scanner.Split(bufio.ScanWords)
	var L int64
	scanner.Scan()
	L, _ = strconv.ParseInt(scanner.Text(), 10, 64)
	var N int64
	scanner.Scan()
	N, _ = strconv.ParseInt(scanner.Text(), 10, 64)
	var M int64
	scanner.Scan()
	M, _ = strconv.ParseInt(scanner.Text(), 10, 64)
	K := make([]float64, L)
	for i := int64(0); i < L; i++ {
		scanner.Scan()
		K[i], _ = strconv.ParseFloat(scanner.Text(), 64)
	}
	A := make([]int64, N)
	S := make([]float64, N)
	for i := int64(0); i < N; i++ {
		scanner.Scan()
		A[i], _ = strconv.ParseInt(scanner.Text(), 10, 64)
		scanner.Scan()
		S[i], _ = strconv.ParseFloat(scanner.Text(), 64)
	}
	solve(L, N, M, K, A, S)
}
